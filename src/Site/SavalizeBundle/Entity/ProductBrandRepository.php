<?php

namespace Site\SavalizeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductBrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductBrandRepository extends EntityRepository {

    public function displayCompanyProducts($company_id) {
        $query = $this->getEntityManager()->createQuery('
            SELECT pb
            FROM SiteSavalizeBundle:ProductBrand pb
            JOIN SiteSavalizeBundle:Brand b
            WHERE b.id = pb.brand
            AND b.company = :company_id
            ')->setParameter('company_id', $company_id);
        return $query->getResult();
    }


    public function displayCategoryData($category_id){

        $query = $this->getEntityManager()->createQuery('
            SELECT pb
            FROM SiteSavalizeBundle:ProductBrand pb
            JOIN SiteSavalizeBundle:Brand b
            WHERE b.id = pb.brand
            AND pb.category = :category_id
            AND b.company is null
            ')->setParameter('category_id' , $category_id );
        return $query->getResult();
    }

    public function checktoinsertNewData($brand, $product){
        $query = $this->getEntityManager()->createQuery('
            SELECT pb
            FROM SiteSavalizeBundle:ProductBrand pb
            JOIN SiteSavalizeBundle:Brand b
            WHERE b.id = pb.brand
            AND b.name = :brand 
            ')->setParameter('brand' , $brand);
        return $query->getResult();

    }

	public function getFirstPBfromCategory($catId){
		 $query= $this->getEntityManager()->createQuery('

			select pb
			from SiteSavalizeBundle:ProductBrand pb 
                        join pb.product p 
                        join p.category c where c.id = :catId
			')->setParameter('catId', $catId)->setMaxResults(3);
        return $query->getResult();
    }

    public function getProductBrandsOfCategory($catId) {
        /* $query= $this->getEntityManager()->createQuery('

          try {
          return $query->getResult();
          } catch (\Doctrine\ORM\NoResultException $e) {
          return null;
          } */
    }

    public function getBrandsOfCategory($catId) {
        /* $query = $this->getEntityManager()->createQuery('
          select pb
          from SiteSavalizeBundle:ProductBrand pb
          where pb.category = :catId
          ')->setParameter('catId', $catId);
          return $query->getResult(); */
        $query = $this->getEntityManager()->createQuery('
			select b from SiteSavalizeBundle:Brand b join 
			b.productBrands pb join pb.product p join p.category c where c.id = :catId 
		')->setParameter('catId', $catId);
        return $query->getResult();
    }

    public function productsandbrands($categoryID) {

        $q = $this->getEntityManager()->createQuery('
            SELECT pb
            FROM SiteSavalizeBundle:ProductBrand pb
            JOIN pb.product p 
            JOIN p.category c 
            WHERE c.id = :categoryID
            AND p.category = :categoryID       
            ')->setParameter('categoryID', $categoryID);
        $result = $q->getResult();
        return $result;
    }
    
    public function productbrandID($categoryID) {

        $q = $this->getEntityManager()->createQuery('
            select pb
            from SiteSavalizeBundle:ProductBrand pb 
            join pb.product p 
            join p.category c where c.id = :catId
            ')->setParameter('catId', $categoryID);
//        $result = $q->getResult();
        $result = 1;
        return $result;
    }

}
