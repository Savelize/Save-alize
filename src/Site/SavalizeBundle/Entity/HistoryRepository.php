<?php

namespace Site\SavalizeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryRepository extends EntityRepository {
    
/* for calendar */
    public function getMonthlyPurchases($start, $end) {

        $q = $this->createQueryBuilder('p');
        $q->select('p')
                ->where('p.baughtAt >= :start')
                ->andWhere('p.baughtAt <= :end')
                ->setParameter('start', $start)
                ->setParameter('end', $end);
        $result = $q->getQuery()->getResult();

        return $result;
    }

    public function getMonth($date) {
        $ndate = new \DateTime($date);
        $ndate = $ndate->format("Y-m-d");
        $date = explode("-", $ndate);
        $year = $date[0];
        $month = $date[1];
        $day = $date[2];

        return $month;
    }

    public function dateRangeData($startDate, $endDate) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name 
            FROM SiteSavalizeBundle:History h
            JOIN SiteSavalizeBundle:Product p
            WHERE p.id = h.productBrand 
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
')
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFilters($startDate, $endDate, $categoryID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE p.id = pb.product
            AND p.category = :category
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY pb.product
            ')
                ->setParameter('category', $categoryID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

//    public function userChartFilters($startDate, $endDate, $productbrand) {
//        $startDated = new \DateTime($startDate);
//        $startDates = $startDated->format("Y-m-d");
//        $endDate = new \DateTime($endDate);
//        $endDate = $endDate->format("Y-m-d");
//        $q = $this->getEntityManager()->createQuery('
//            SELECT pb
//            FROM SiteSavalizeBundle:History h
//            JOIN SiteSavalizeBundle:ProductBrand pb
//            WHERE pb.id = :productbrand
//            AND h.baughtAt BETWEEN :start AND :end
//            GROUP BY h.productBrand
//')  ->setParameter('productbrand', $productbrand)
//                ->setParameter('start', $startDates)
//                ->setParameter('end', $endDate);
//
//        $result = $q->getResult();
//
//        return $result;
//    }
    
    //-------------------------------uncomment the following
    
    
    /*
    public function userChartFilters($startDate, $endDate, $category) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        $q = $this->getEntityManager()->createQuery('
            SELECT pb
            FROM SiteSavalizeBundle:ProductBrand pb
            JOIN SiteSavalizeBundle:History h
            WHERE pb.category = :category
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
')->setParameter('category', $category)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }
*/
}
