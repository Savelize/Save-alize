<?php

namespace Site\SavalizeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryRepository extends EntityRepository {

    public function getMonthlyPurchases($start, $end) {

        $q = $this->createQueryBuilder('p');
        $q->select('p')
                ->where('p.baughtAt >= :start')
                ->andWhere('p.baughtAt <= :end')
//                ->groupBy('p.baughtAt')
//       $q = $this->getEntityManager()->createQuery('
//            SELECT sum(p.price) as price
//            FROM SiteSavalizeBundle:History p
//            WHERE p.baughtAt BETWEEN :start AND :end
//            GROUP BY p.baughtAt
//            ')
                ->setParameter('start', $start)
                ->setParameter('end', $end);
        $result = $q->getQuery()->getResult();

        return $result;
    }

    public function getMonth($date) {
        $ndate = new \DateTime($date);
        $ndate = $ndate->format("Y-m-d");
        $date = explode("-", $ndate);
        $year = $date[0];
        $month = $date[1];
        $day = $date[2];

        return $month;
    }

    public function dateRangeData($startDate, $endDate) {
        $startDated = new \DateTime($startDate);

        $startDates = $startDated->format("Y-m-d");
        //echo $startDates;
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name 
            FROM SiteSavalizeBundle:History h
            JOIN SiteSavalizeBundle:Product p
            WHERE p.id = h.productBrand 
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
')
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFiltersPrice($startDate, $endDate, $productbrand) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price 
            FROM SiteSavalizeBundle:History h
            WHERE h.productBrand = :productbrand
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
')
                ->setParameter('productbrand', $productbrand)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFilters($startDate, $endDate, $productbrand) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        $q = $this->getEntityManager()->createQuery('
            SELECT pb.id
            FROM SiteSavalizeBundle:History h
            JOIN SiteSavalizeBundle:ProductBrand pb
            WHERE pb.id = h.productBrand 
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
')  ->setParameter('productbrand', $productbrand)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

}
