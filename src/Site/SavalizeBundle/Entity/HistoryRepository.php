<?php

namespace Site\SavalizeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryRepository extends EntityRepository {
    /* for calendar */

    public function getMonthlyPurchases($start, $end, $userID) {

        $q = $this->createQueryBuilder('p');
        $q->select('p')
                ->where('p.baughtAt >= :start')
                ->andWhere('p.baughtAt <= :end')
                ->andWhere('p.customer = :userID')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->setParameter('userID', $userID);
        $result = $q->getQuery()->getResult();

        return $result;
    }

    public function getMonth($date) {
        $ndate = new \DateTime($date);
        $ndate = $ndate->format("Y-m-d");
        $date = explode("-", $ndate);
        $year = $date[0];
        $month = $date[1];
        $day = $date[2];

        return $month;
    }

    public function dateRangeData($startDate, $endDate, $userID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name 
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE h.customer = :userID
            AND h.baughtAt BETWEEN :start AND :end
            GROUP BY h.productBrand
    ')
                ->setParameter('userID', $userID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFilters($startDate, $endDate, $categoryID, $userID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE p.id = pb.product
            AND p.category = :category
            AND h.baughtAt BETWEEN :start AND :end
            AND h.customer = :user
            GROUP BY pb.product
            ')                
                ->setParameter('user', $userID)
                ->setParameter('category', $categoryID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFiltersProductOnly($startDate, $endDate, $productID, $userID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT h.price as price , h.baughtAt as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE p.id = pb.product
            AND p.id = :productID
            AND h.baughtAt BETWEEN :start AND :end
            AND h.customer = :user            
            ')
                ->setParameter('user', $userID)
                ->setParameter('productID', $productID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFiltersBrandOnly($startDate, $endDate, $brandID, $userID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE pb.brand = :brandID
            AND h.baughtAt BETWEEN :start AND :end
            AND h.customer = :user
            GROUP BY pb.product
            ')
                ->setParameter('user', $userID)
                ->setParameter('brandID', $brandID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    public function userChartFiltersProductBrandOnly($startDate, $endDate, $brandID, $productID, $userID) {
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , p.name as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.brand b
            JOIN pb.product p
            WHERE b.id = pb.brand
            AND b.id = :brandID
            AND h.baughtAt BETWEEN :start AND :end
            AND h.customer = :user
            ')
                ->setParameter('user', $userID)
                ->setParameter('productID', $productID)
                ->setParameter('brandID', $brandID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }
    
    public function userChartFiltersProductBrandCategory($startDate, $endDate, $brandID, $productID, $categoryID, $userID){
        $startDated = new \DateTime($startDate);
        $startDates = $startDated->format("Y-m-d");
        $endDate = new \DateTime($endDate);
        $endDate = $endDate->format("Y-m-d");
        // g stands for graph
        $q = $this->getEntityManager()->createQuery('
            SELECT SUM(h.price) as price , h.baughtAt as name
            FROM SiteSavalizeBundle:History h
            JOIN h.productBrand pb
            JOIN pb.product p
            WHERE pb.brand = :brandID
            AND p.category = :categoryID
            AND p.id = :productID
            AND pb.product = :productID
            AND h.baughtAt BETWEEN :start AND :end
           AND h.customer = :user
            ')
                ->setParameter('user', $userID)
                ->setParameter('categoryID', $categoryID)
                ->setParameter('brandID', $brandID)
                ->setParameter('productID', $productID)
                ->setParameter('start', $startDates)
                ->setParameter('end', $endDate);

        $result = $q->getResult();

        return $result;
    }

    //-------------------------------uncomment the following

}
